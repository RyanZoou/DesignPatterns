OOP的三大核心：封装 + 继承 + 多态 ！



#继承相关：
1.继承有助于为程序中包含的不同类建立一种结构。不过为了保证类之间的送绑定，通常会继承抽象类，而且是前继承（只有一层子类）。
  如果程序通过深层次的继承绑定到具体类，即使是父类的简单修改，也会对子类造成严重破坏！

#多态相关：
1.多态的真正价值在于，可以调用有相同接口的对象来完成不同的工作
2.多态的价值在于，即使形态可能不同，但是总能依靠接口知道你的实现。接口中的信息越多，如指示希望哪种类型的行为（有无返回值）
  是哪种类型的数据，就能越容易让多种不同的形态很好的协作。
3.PHP的设计模式中没有类似C#的数据类型限定，因此我们无法明确接口的详细信息，但是我们可以通过接口的注释信息来提示被继承者；
  主要通过 @return，@params等等提示信息。



*设计模式随记：

一、设计模式前言：

1. PHP的第一设计原则：按接口(或者抽象类)而不是按实现来编程。
    1）以最简单的方式来讲，按接口编程是指，要将变量设置为一个抽象类或接口数据类型的实例，而不是一个具体实现的实例。
    2）一个对象实例的数据类型不仅仅是它实例化的类的数据类型，该类的所有父类也将作为它的数据类型！

2. 第二个设计模式原则：应当优先选择对象组合而不是类继承。
    1）在开发程序时，如果有机会使用组合，就应当优先使用组合而不是继承。这样一来，子类就不会因为继承到大量不用的属性和
      方法而变得过度膨胀。
    2）继承与组合使用区别：
        继承：子类继承父类，当子类被引用时，等同于同时引用了子类和父类，当父类发生改变时，需要同时改正所有子类，不然
             会影响子类的正常使用。
        组合：组合是指，一个客户端需要使用多个类里的功能，从而将多个类同时引用的过程叫做组合引用，也就是组合。
    3）委托：
        在设计模式领域中，经常能看到有的类的构造函数中看到其他类，一个类将一个任务传给另一个类，这就是委托；正是因为
     委托使得组合拥有了强大能力。
    4）总结：
        使用继承时，每一个子类是另一个类或多个类的一部分；而采用组合，对象可以使用一个类或者一组类完成一系列任务，这
     并不是说不能使用继承。实际上，大多数设计模式同时包含继承和组成。不过要尽量避免使用继承形成一长串子类、孙子类、曾
     孙类等，设计模式方法建议使用浅继承，另外尽量使用多个类的功能。这种方式有助于避免紧密绑定，另外倘若一个具体类包含
     子类，修改这个类可能会导致整个程序的崩溃，而前继承可以避免这种情况。

二、建模语言UML(Unifune Modeling luaguage)要点：(stop here !)

1.聚合：
    聚合关系表示一个聚合对象与它的所有者拥有相同的生命期。他们的关系就像心脏与肺部的关系一样，只有心脏供血，肺部才能将
  氧气输送至血液中以维持身体机能。它们都是可以单独运转的器官，但是离开任意一方都无法正常工作。